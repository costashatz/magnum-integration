# kate: indent-width 2;

addons:
  apt:
    packages:
    - libgl1-mesa-dev
    - g++-4.8 # DART does not work with 4.7
    - ninja-build
    - lcov
    - libbullet-dev
    - libjpeg-dev
    - libpng12-dev
    - libeigen3-dev
    - libassimp-dev
    - libboost-regex-dev
    - libboost-system-dev
    - pkg-config
    - build-essential
    - liburdfdom-dev
    - liburdfdom-headers-dev
    - libtinyxml-dev
    - libtinyxml2-dev
    - "libc6:i386" # CMake 2.8.12 is 32bit

matrix:
  include:
  - language: cpp
    os: linux
    dist: trusty
    compiler: gcc
    env:
    - JOBID=linux-desktop
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
    - LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
  - language: cpp
    os: linux
    dist: trusty
    compiler: gcc
    env:
    - JOBID=linux-desktop-nondeprecated
    - TARGET=desktop
    - BUILD_DEPRECATED=OFF
  - language: cpp
    os: linux
    dist: trusty
    compiler: clang
    env:
    - JOBID=linux-desktop-sanitizers
    - TARGET=desktop-sanitizers
    - CMAKE_CXX_FLAGS=-fsanitize=address
    addons:
      apt:
        sources:
        - llvm-toolchain-trusty
        packages:
        - libgl1-mesa-dev
        - clang-3.8
        - ninja-build
        - libbullet-dev
        - libjpeg-dev
        - libpng12-dev
        - libeigen3-dev
        - libassimp-dev
        - libboost-regex-dev
        - libboost-system-dev
        - pkg-config
        - build-essential
        - liburdfdom-dev
        - liburdfdom-headers-dev
        - libtinyxml-dev
        - libtinyxml2-dev
  - language: cpp
    os: linux
    dist: trusty
    compiler: gcc
    env:
    - JOBID=linux-es2
    - TARGET=desktop-gles
    - TARGET_GLES2=ON
    - CMAKE_CXX_FLAGS="--coverage"
    - LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
  - language: cpp
    os: linux
    dist: trusty
    compiler: gcc
    env:
    - JOBID=linux-es3
    - TARGET=desktop-gles
    - TARGET_GLES2=OFF
    - CMAKE_CXX_FLAGS="--coverage"
    - LCOV_EXTRA_OPTS="--gcov-tool /usr/bin/gcov-4.8"
  - language: cpp
    os: osx
    compiler: clang
    env:
    - JOBID=macos-desktop
    - TARGET=desktop
    - CMAKE_CXX_FLAGS="--coverage"
  #- language: cpp
    #os: osx
    #osx_image: xcode7.3
    #env:
    #- JOBID=ios-es2
    #- TARGET=ios-simulator
    #- TARGET_GLES2=ON
  #- language: cpp
    #os: osx
    #osx_image: xcode7.3
    #env:
    #- JOBID=ios-es3
    #- TARGET=ios-simulator
    #- TARGET_GLES2=OFF
  - language: cpp
    os: osx
    env:
    - JOBID=emscripten-webgl1
    - TARGET=emscripten
    - TARGET_GLES2=ON
  - language: cpp
    os: osx
    env:
    - JOBID=emscripten-webgl2
    - TARGET=emscripten
    - TARGET_GLES2=OFF
  #- language: android
    #os: linux
    #dist: trusty
    #env:
    #- JOBID=android-es2
    #- TARGET=android
    #- TARGET_GLES2=ON
    #addons:
      #apt:
        #sources:
        #- ubuntu-toolchain-r-test
        #packages:
        #- g++-4.7
        #- ninja-build
        #- "libc6:i386" # CMake 2.8.12 is 32bit
    #android:
      #components:
      #- build-tools-19.0.0
      #- android-19
      #- sys-img-armeabi-v7a-android-19
  #- language: android
    #os: linux
    #dist: trusty
    #env:
    #- JOBID=android-es3
    #- TARGET=android
    #- TARGET_GLES2=OFF
    #addons:
      #apt:
        #sources:
        #- ubuntu-toolchain-r-test
        #packages:
        #- g++-4.7
        #- ninja-build
        #- "libc6:i386" # CMake 2.8.12 is 32bit
    #android:
      #components:
      #- build-tools-19.0.0
      #- android-19
      #- sys-img-armeabi-v7a-android-19

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/00ec7a9066bb0fec98f3
    on_success: change
    on_failure: always
    on_start: never

cache:
  directories:
  - $HOME/cmake
  - $HOME/deps-dart

install:
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then export WITH_DART=ON; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export WITH_DART=ON; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ]; then export CXX=g++-4.8; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-sanitizers" ]; then export CXX=clang++-3.8; fi
- if [ "$BUILD_DEPRECATED" != "OFF" ]; then export BUILD_DEPRECATED=ON; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then export PLATFORM_GL_API=GLX; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then export WITH_BULLET=OFF; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then wget -nc http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin && chmod +x android-*.bin && ./android-*.bin -y | grep -v Extracting; fi
# Download CMake 2.8.12 to ensure we're still compatible with it (Travis has
# 3.9 since December 2017). Also, the PATH setting can't be cached, so it's
# separate (bit me two times already). ASan doesn't like when 32bit libraries
# are running, so for it we use the preinstalled CMake.
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ] && [ ! -e "$HOME/cmake/bin" ]; then cd $HOME ; wget -nc --no-check-certificate https://cmake.org/files/v2.8/cmake-2.8.12.2-Linux-i386.tar.gz && mkdir -p cmake && cd cmake && tar --strip-components=1 -xzvf ../cmake-2.8.12.2-Linux-i386.tar.gz && cd $TRAVIS_BUILD_DIR ; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ]; then export PATH=$HOME/cmake/bin:$PATH && cmake --version; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install lcov; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then export PLATFORM_GL_API=CGL; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then gem install xcpretty; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then brew install emscripten && export LLVM=/usr/local/opt/emscripten/libexec/llvm/bin && emcc; fi

# Bullet
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install bullet; fi

# DART and its dependencies
- if [ "$TRAVIS_OS_NAME" == "linux" ]; then ./package/ci/travis-dependencies.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install dartsim; fi

script:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-gles" ]; then ./package/ci/travis-desktop-gles.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then ./package/ci/travis-android-arm.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then ./package/ci/travis-ios-simulator.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then ./package/ci/travis-emscripten.sh; fi
# Travis somehow is not able to gather all output, try to force it using this
- sync

after_success:
# Keep in sync with PKBUILD-coverage, please
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --directory . --capture --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --extract coverage.info "*/src/Magnum*/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/Test/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then lcov $LCOV_EXTRA_OPTS --remove coverage.info "*/build/src/*" --output-file coverage.info > /dev/null; fi
- if [[ "$CMAKE_CXX_FLAGS" == *"--coverage"* ]]; then bash <(curl -s https://codecov.io/bash) -f coverage.info; fi
